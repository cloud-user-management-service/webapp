name: Build Packer Custom AMI

on:
  pull_request:
    types: [closed]
  # push:
    branches:
      - main

jobs:
  build-ami:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      #checkout the repository
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven


      #run the integration tests
      - name: Integration tests
        run: mvn test
      
      #build the application artifact
      - name: Build the application artifact
        run: mvn clean package -DskipTests
      
      #configure AWS credentials of dev account to build the AMI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      
      #install packer
      - name: Install Packer
        run: |
          sudo apt-get update
          sudo apt-get install -y packer

      #build the AMI using packer
      - name: Build the AMI using Packer
        run: |
          cd packer
          packer init webapp-ami-us-west-2.pkr.hcl
          packer build webapp-ami-us-west-2.pkr.hcl
      
      #configure AWS credentials of demo account
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: us-west-2

      # # Get the latest AMI ID
      # - name: Fetch latest AMI ID
      #   id: fetch_ami
      #   run: echo "AMI_ID=$(jq -r '.builds[0].artifact_id' manifest.json | cut -d ":" -f2)" >> $GITHUB_ENV

      # Fetch the latest AMI ID based on the custom naming pattern
      - name: Fetch the latest AMI ID
        id: fetch_ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --filters "Name=name,Values=csye6225_f24_webapp_*" \
            --query "Images | sort_by(@, &CreationDate) | [-1].ImageId" \
            --output text)
          
          echo "Latest AMI ID: $AMI_ID"
          
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
      
      # Create a launch template using the new AMI ID
      - name: create lauch template using the new ami id
        run: |
          aws ec2 create-launch-template-version \
          --launch-template-name csye6225_asg \
          --source-version 1 \
          --version-description "Updated lauch template with new AMI" \
          --launch-template-data '{"ImageId":"${{ env.AMI_ID }}"}'
      
      # # Refresh ec2 instance
      # - name: Refresh ec2 instance in autoscaling group in demo account
      #   run: |
      #     REFRESH_ID=$(aws autoscaling start-instance-refresh \
      #       --auto-scaling-group-name \
      #       --strategy Rolling \
      #       --desired-configuration '{"LaunchTemplate":{"LaunchTemplateName":"csye6225_asg","Version":"$Latest"}}'
      #       --preferences '{"InstanceWarmup":300,"MinHealthyPercentage":50}' \
      #       --query 'InstanceRefreshId' --output text)
      #     echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

      - name: Refresh EC2 instance in AutoScaling Group
        run: |
          echo "ASG_NAME=${{ secrets.ASG_NAME }}"

          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
            --strategy Rolling \
            --desired-configuration '{"LaunchTemplate":{"LaunchTemplateName":"csye6225_asg","Version":"$Latest"}}' \
            --preferences '{"InstanceWarmup":300,"MinHealthyPercentage":50}' \
            --query 'InstanceRefreshId' --output text)
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

      
      # Wait for the instance refresh to complete
      - name: Wait for Instance Refresh to Complete
        run: |
          while true; do
            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
              --query 'InstanceRefreshes[?InstanceRefreshId==`'$REFRESH_ID'`].Status' \
              --output text)
            if [ "$REFRESH_STATUS" = "Successful" ]; then
              echo "Instance Refresh Completed Successfully."
              break
            elif [ "$REFRESH_STATUS" = "Failed" ]; then
              echo "Instance Refresh Failed."
              exit 1
            else
              echo "Waiting for Instance Refresh to Complete... Current Status: $REFRESH_STATUS"
              sleep 30
            fi
          done
      
      - name: Validate Deployment in Demo
        run: |
          echo "Validation in Demo Account Complete."